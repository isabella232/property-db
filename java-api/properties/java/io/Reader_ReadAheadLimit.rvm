package mop;

import java.io.*;
import javamoprt.MOPLogging;
import javamoprt.MOPLogging.Level;
Reader_ReadAheadLimit(Reader r) {

	int limit = 0;

	int rest = 0;

	String LOC = null;
	event mark(Reader r, int l){
		this.limit = l;
		this.rest = l;
	}
	event read(Reader r, int n){
		if (n != -1) {
			this.rest -= 1;
			if (this.rest < 0) this.LOC = __LOC;
		}
	}
	event read(Reader r, int n){
		if (n != -1) {
			this.rest -= n;
			if (this.rest < 0) this.LOC = __LOC;
		}
	}
	event badreset(Reader r){
		if ( ! (rest < 0) ) {
			return false;
		}
		{
			this.limit = 0;
			this.rest = 0;
		}
	}
	event goodreset(Reader r){
		if ( ! (rest >= 0) ) {
			return false;
		}
		{
			this.rest = this.limit;
		}
	}
	ere: (mark | read | goodreset)* badreset+
	@match
	{
		MOPLogging.out.println(Level.CRITICAL, __DEFAULT_MESSAGE);
		MOPLogging.out.println(Level.CRITICAL, "The position mark has been invalidated.");
		if (this.LOC != null) {
			MOPLogging.out.println(Level.CRITICAL, "read() at line " + this.LOC + " invalidated the mark.");
		}
	}
}
