package mop;

import android.webkit.*;
import android.webkit.Webstorage.QuotaUpdater;
import java.lang.*;
import javamoprt.MOPLogging;
import javamoprt.MOPLogging.Level;

/**
 * Raises an error if the QuotaUpdater callback is called with a lower quota 
 * after a call to onReachedMaxAppCacheSizeUpdate
 *
 * When the Application Cache has reached the maximum size,
 * the client must respond by invoking the updateQuota(long)
 * method of the supplied WebStorage.QuotaUpdater instance. 
 * The minimum value that can be set for the new quota is the current quota.
 * ( http://developer.android.com/reference/android/webkit/WebChromeClient.html#onReachedMaxAppCacheSize(long, long, android.webkit.WebStorage.QuotaUpdater) )
 *
 * This specification raises an error when the client attempts to update
 * the quota with a lower value than the existing one, or when the client 
 * fails to call the callback method.
 *
 * @severity error
 */

WebChromeClient_MaxAppCacheSizeUpdate(WebChromeClient c, WebStorage.QuotaUpdater u) {
	int quota = 0;
    int badQuota = 0;
	String LOC_client = null;
	String LOC_update = null;

	creation event onReachedMaxAppCacheSizeUpdate before(WebChromeClient c, QuotaUpdater u, int quota) :
		execution(* WebChromeClient+.onReachedMaxAppCacheSizeUpdate(long, long, QuotaUpdater)) && this(c) && args(long, quota, u)  {
		    this.quota = quota;
            this.LOC_client = __LOC;
	}

	event goodUpdateQuota before(QuotaUpdater u, long quota) :
		call(* QuotaUpdater+.updateQuota(long)) && target(u)  && condition(quota >= this.quota) { }

	event badUpdateQuota before(QuotaUpdater u, long quota) :
		call(* QuotaUpdater+.updateQuota(long)) && target(u)  && condition(quota < this.quota) {
            this.badQuota = quota;
	        this.LOC_update = __LOC;
	}

	event endProg before() : endProgram() 
		{System.out.println("Program has ended.");}


	ere : (onReachedMaxAppCacheSizeUpdate goodUpdateQuota)* endProg

	@fail {
		MOPLogging.out.println(Level.CRITICAL, __DEFAULT_MESSAGE);
		MOPLogging.out.println(Level.CRITICAL, "onReachedMaxAppCacheSizeUpdate was called with quota " + this.quota + " at line " + this.LOC_client);
		if (this.LOC_update != null) {
		  MOPLogging.out.println(Level.CRITICAL, "However, the callback updateQuota was called with a lower quota, " + this.badQuota + ", at line " +this.LOC_update);
                } else {
		  MOPLogging.out.println(Level.CRITICAL, "However, the callback updateQuota was not called before the program end.");
		}
	}
}


