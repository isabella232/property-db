package mop;

import android.webkit.*;
import java.lang.*
import javamoprt.MOPLogging;
import javamoprt.MOPLogging.Level;

/**
 * Raises an error if the QuotaUpdater callback is called with a lower quota 
 * after a call to onExceededDatabaseQuota
 * http://developer.android.com/reference/android/webkit/WebChromeClient.html#onExceededDatabaseQuota(java.lang.String, java.lang.String, long, long, long, android.webkit.WebStorage.QuotaUpdater)
 *
 * When the quota has been exceeded for the Web SQL Database API for a
 * particular origin. The client must respond by invoking the updateQuota(long)
 * method of the supplied WebStorage.QuotaUpdater instance. 
 * The minimum value that can be set for the new quota is the current quota.
 *
 * This specification raises an error when the client attempts to update
 * the quota with a lower value than the existing one, or when the client 
 * fails to call the callback method.
 *
 * @severity error
 */

WebChromeClient_ExceededQuotaUpdate(WebChromeClient c, WebStorage.QuotaUpdater u) {
	int quota = 0;
        int badQuota = 0;
	String LOC_client = null;
	String LOC_update = null;

	creation event onExceededDatabaseQuota before(WebChromeClient c, Webstorage.QuotaUpdater u, int quota) : 
		execution(* WebChromeClient+.onExceededDatabaseQuota(String, String, long, long, long, WebStorage.QuotaUpdater)) && this(c) && args(String, String, quota, long, long, u)  {
		this.quota = quota;
                this.LOC_client = __LOC;
	}

	event badupdateQuota before(WebStorage.QuotaUpdater u, long quota) :
		call(* WebStorage.QuotaUpdater+.updateQuota(long)) && target(u)  && condition(quota < this.quota) {
                  this.badQuota = quota;
	          this.LOC_update = __LOC;
	}

	event endProg before() : endProgram() 
		{System.out.println("Program has ended.");}


	ere : (onExceededDatabaseQuota updateQuota)* endProg

	@fail {
		MOPLogging.out.println(Level.CRITICAL, __DEFAULT_MESSAGE);
		MOPLogging.out.println(Level.CRITICAL, "onExceededDatabaseQuotaupdateQuota was called with quota " + this.quota + " at line " + this.LOC_client);
		if (this.LOC != null) {
		  MOPLogging.out.println(Level.CRITICAL, "However, the callback updateQuota was called with a lower quota, " + this.badQuota + ", at line " +this.LOC_update);
                } else {
		  MOPLogging.out.println(Level.CRITICAL, "However, the callback updateQuota was not called before the program end.");
		}
	}
}


