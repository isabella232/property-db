package mop;

import java.util.*;
import javamoprt.MOPLogging;
import javamoprt.MOPLogging.Level;
Collections_SynchronizedCollection(Collection col, Iterator iter) {

	Collection col;
	creation event sync(Collection col){
		this.col = col;
	}
	event syncCreateIter(Collection col, Iterator iter){
		if ( ! (Thread.holdsLock(col)) ) {
			return false;
		}
		{
		}
	}
	event asyncCreateIter(Collection col, Iterator iter){
		if ( ! (!Thread.holdsLock(col)) ) {
			return false;
		}
		{
		}
	}
	event accessIter(Iterator iter){
		if ( ! (!Thread.holdsLock(this.col)) ) {
			return false;
		}
		{
		}
	}
	ere: (sync asyncCreateIter) | (sync syncCreateIter accessIter)
	@match
	{
		MOPLogging.out.println(Level.CRITICAL, __DEFAULT_MESSAGE);
		MOPLogging.out.println(Level.CRITICAL, "A synchronized collection was accessed in a thread-unsafe manner.");
	}
}
